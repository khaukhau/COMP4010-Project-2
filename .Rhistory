req(input$go)
req(data_filtered())
if (!is.null(data_filtered())) {
plot_diverging_bar_chart(data_filtered(), input$year, input$sector)
}
}
})
}
shinyApp(ui = ui, server = server)
library(tidyverse)
#install.packages("vroom")
library(vroom)
#install.packages("fs")
library(fs)
library(readr)
library(dplyr)
library(plotly)
#install.packages("plotly")
library(shiny)
library(bslib)
library(bsicons)
library(showtext)
paygap <- read_csv('data/cleaned/paygaps_2018_2022.csv')
companies <- read_csv('data/cleaned/companies.csv')
paygap <- paygap %>%
mutate(Year = year(ymd_hms(DueDate)))
# Function to filter sector by keyword
filter_by_keyword <- function(df, keywords) {
pattern <- paste(keywords, collapse = "|")
filtered_df <- df[grep(pattern, df$CurrentName, ignore.case = TRUE ),]
return(filtered_df)
}
# List of keywords for different sectors
sectors_keywords <- list(
Tech = c("Tech", "IT"),
Finance = c("Financial", "Finance", "Insurance"),
Education = c("Education", "School"),
Healthcare = c("Medical", "Pharmaceutical", "Health"),
Retail = c("Retail"),
Entertainment = c("Entertainment", "Art", "Recreation"),
Travel = c("Travel"),
Consulting = c("Consulting"),
Banking = c("Bank"),
Marketing = c("Marketing")
)
# Dictionary to hold data frames for each sector
sector_data_frames <- map(sectors_keywords, filter_by_keyword, df = paygap)
font_add_google("DM Sans", "DM Sans")
showtext_auto()
main_font = "DM Sans"
theme_general <- function() {
theme_minimal(
base_family = main_font,
base_size = 11,
base_line_size = 11/22,
base_rect_size = 11/22
) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major.y = element_line(color = "grey80"),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(color = "grey80"),
panel.grid.minor.x = element_blank(),
axis.title.x = element_text(size = 12, hjust = 0.5, face = "bold"),
axis.title.y = element_text(size = 12, hjust = 0.5, face = "bold"),
legend.title = element_text(face = "bold")
)
}
pal <- c('#00202e', '#003f5c', '#2c4875', '#8a508f', '#bc5090', '#ff6361', '#ff8531', '#ffa600', '#ffd380','#35A29F', '#6ca0dc', '#ffc2d1')
plot_diverging_bar_chart <- function(data, year, sector_name) {
# Filter by year
data <- data %>%
mutate(DiffMeanHourlyPercent = as.numeric(DiffMeanHourlyPercent),
Year = year(DueDate)) %>%
filter(Year == year)
max_val <- ceiling(max(abs(data$DiffMeanHourlyPercent), na.rm = TRUE))
# Create the plot
p <- ggplot(data, aes(x = reorder(CurrentName, DiffMeanHourlyPercent), y = DiffMeanHourlyPercent)) +
geom_bar(data = subset(data, DiffMeanHourlyPercent >= 0), stat = "identity", aes(y = DiffMeanHourlyPercent), fill = pal[11]) +
geom_bar(data = subset(data, DiffMeanHourlyPercent < 0), stat = "identity", fill = pal[12]) +
coord_flip() +
scale_y_continuous(labels = function(x) abs(x)) +
labs(title = paste("Diverging Bar Chart of", sector_name, "Sector Pay Gaps in", year),
x = "Company Name",
y = "Mean Hourly Pay Difference (%)") +
theme_minimal() +
theme_general() +
theme(axis.text.y = element_text(size = 4),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(color = "lightgrey", size = 0.5))
return(p)
}
plot_dumbbell_chart <- function(data) {
data %>%
gather(key = "Gender_Quartile", value = "Percentage",
MaleLowerQuartile:FemaleTopQuartile) %>%
separate(Gender_Quartile, into = c("Gender", "Quartile"), sep = "(?<=Male|Female)") %>%
mutate(Quartile = factor(Quartile, levels = c("LowerQuartile", "LowerMiddleQuartile", "TopQuartile", "UpperMiddleQuartile"))) %>%  # Adjust order of appearance
group_by(Year, Gender, Quartile) %>%
summarize(Percentage = mean(Percentage, na.rm = TRUE), .groups = 'drop') %>%
ggplot(aes(x = Year, y = Percentage, group = interaction(Quartile, Year))) +
geom_line() +
geom_point(aes(color = Gender), size = 3) +
facet_wrap(~Quartile, scales = "free_y") +
# scale_y_continuous(limits = c(35, 65)) +
labs(title = "Yearly Changes in Quartile Percentages",
x = "Year",
y = "Average Percentage",
color = "Gender") +
theme_general() +
theme(legend.position = "bottom") +
coord_flip()
}
plot <- plot_dumbbell_chart(paygap)
print(plot)
plot_gender_distribution <- function(df) {
df %>%
gather(key = "Quartile", value = "Percentage", MaleLowerQuartile:FemaleTopQuartile) %>%
separate(Quartile, into = c("Gender", "Quartile"), sep = "(?<=Male|Female)") %>%
mutate(Quartile = factor(Quartile, levels = c("LowerQuartile", "LowerMiddleQuartile", "UpperMiddleQuartile", "TopQuartile"))) %>%
ggplot(aes(x = Quartile, y = Percentage, fill = Gender)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Gender Pay Gap Distribution",
x = "Income Quartile",
y = "Percentage of Population",
fill = "Gender") +
scale_fill_manual(values = c(Male = pal[11], Female = pal[12])) +
theme_minimal() +
theme_general()
}
# Define UI
ui <- fluidPage(
titlePanel("Gender Pay Gap Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("sector", "Choose a Sector:", choices = names(sectors_keywords), multiple = FALSE),
selectInput("year", "Select Year:", choices = unique(paygap$Year)),
actionButton("go", "Generate Graph")
),
mainPanel(
tabsetPanel(
tabPanel("Dumbbell Chart", plotOutput("dumbbellChart")),
tabPanel("Sector Analysis",
plotOutput("incomeDistPlot"),
plotOutput("divergingBarPlot")
)
)
)
)
)
# Define server logic
server <- function(input, output) {
data_filtered <- reactive({
req(input$go)  # This makes sure the code waits for the user to click 'Generate Graph'
selected_sectors <- input$sector
year_selected <- as.numeric(input$year)
# sector_data <- paygap %>%
#   filter(str_detect(EmployerName, regex(input$sector, ignore_case = TRUE)) & Year == as.numeric(input$year))
# return(sector_data)
# Combine data from all selected sectors
combined_data <- do.call(rbind, lapply(selected_sectors, function(sector) {
sector_data_frames[[sector]] %>% filter(Year == year_selected)
}))
return(combined_data)
})
output$dumbbellChart <- renderPlot({
req(sector_data_frames[[input$sector]])
plot_dumbbell_chart(sector_data_frames[[input$sector]])
})
output$incomeDistPlot <- renderPlot({
req(data_filtered())  # Ensure there is data to plot
plot_gender_distribution(data_filtered())
})
output$divergingBarPlot <- renderPlot({
req(data_filtered())
plot_diverging_bar_chart(data_filtered(), input$year, input$sector)
})
}
shinyApp(ui = ui, server = server)
# Define server logic
server <- function(input, output) {
# Flag to track button click
button_clicked <- reactiveVal(FALSE)
data_filtered <- reactive({
if (button_clicked()) {
req(input$sector)
req(input$year)
selected_sectors <- input$sector
year_selected <- as.numeric(input$year)
# Combine data from all selected sectors
combined_data <- do.call(rbind, lapply(selected_sectors, function(sector) {
sector_data_frames[[sector]] %>% filter(Year == year_selected)
}))
button_clicked() <<- FALSE  # Reset flag after filtering
return(combined_data)
} else {
return(NULL)  # Return NULL when button not clicked
}
})
# Update button click action
observeEvent(input$go, {
button_clicked() <<- TRUE  # Set flag to TRUE on button click
})
output$dumbbellChart <- renderPlot({
req(data_filtered())
plot_dumbbell_chart(sector_data_frames[[input$sector]])
})
output$incomeDistPlot <- renderPlot({
req(data_filtered())
plot_gender_distribution(data_filtered())
})
output$divergingBarPlot <- renderPlot({
req(data_filtered())
plot_diverging_bar_chart(data_filtered(), input$year, input$sector)
})
}
shinyApp(ui = ui, server = server)
# Define server logic
server <- function(input, output) {
# Flag to track button click
button_clicked <- reactiveVal(FALSE)
data_filtered <- reactive({
if (button_clicked()) {
req(input$sector)
req(input$year)
selected_sectors <- input$sector
year_selected <- as.numeric(input$year)
# Combine data from all selected sectors
combined_data <- do.call(rbind, lapply(selected_sectors, function(sector) {
sector_data_frames[[sector]] %>% filter(Year == year_selected)
}))
button_clicked() <<- FALSE  # Reset flag after filtering
return(combined_data)
} else {
return(NULL)  # Return NULL when button not clicked
}
})
# Update button click action
observeEvent(input$go, {
button_clicked() <<- TRUE  # Set flag to TRUE on button click
})
output$dumbbellChart <- renderPlot({
req(data_filtered())
plot_dumbbell_chart(sector_data_frames[[input$sector]])
})
output$incomeDistPlot <- renderPlot({
req(data_filtered())
plot_gender_distribution(data_filtered())
})
output$divergingBarPlot <- renderPlot({
req(data_filtered())
plot_diverging_bar_chart(data_filtered(), input$year, input$sector)
})
}
shinyApp(ui = ui, server = server)
# Define server logic
server <- function(input, output) {
# Flag to indicate button press
updateButton <- reactiveVal(FALSE)
# Update data_filtered when updateButton is TRUE or sector/year changes
data_filtered <- reactive({
if (updateButton() | any(changed(selected_sectors, year_selected))) {
selected_sectors <- input$sector
year_selected <- as.numeric(input$year)
# Combine data from all selected sectors
combined_data <- do.call(rbind, lapply(selected_sectors, function(sector) {
sector_data_frames[[sector]] %>% filter(Year == year_selected)
}))
updateButton(FALSE)  # Reset flag after update
return(combined_data)
} else {
# Return previous data if no update needed
return(data_filtered())
}
})
# Update updateButton on button click
observeEvent(input$go, {
updateButton(TRUE)
})
output$dumbbellChart <- renderPlot({
req(sector_data_frames[[input$sector]])
plot_dumbbell_chart(sector_data_frames[[input$sector]])
})
output$incomeDistPlot <- renderPlot({
req(data_filtered())  # Ensure there is data to plot
plot_gender_distribution(data_filtered())
})
output$divergingBarPlot <- renderPlot({
req(data_filtered())
plot_diverging_bar_chart(data_filtered(), input$year, input$sector)
})
}
shinyApp(ui = ui, server = server)
# Define server logic
server <- function(input, output) {
data_filtered <- reactive({
req(input$go)  # This makes sure the code waits for the user to click 'Generate Graph'
selected_sectors <- input$sector
year_selected <- as.numeric(input$year)
# sector_data <- paygap %>%
#   filter(str_detect(EmployerName, regex(input$sector, ignore_case = TRUE)) & Year == as.numeric(input$year))
# return(sector_data)
# Combine data from all selected sectors
combined_data <- do.call(rbind, lapply(selected_sectors, function(sector) {
sector_data_frames[[sector]] %>% filter(Year == year_selected)
}))
return(combined_data)
})
output$dumbbellChart <- renderPlot({
req(sector_data_frames[[input$sector]])
plot_dumbbell_chart(sector_data_frames[[input$sector]])
})
output$incomeDistPlot <- renderPlot({
req(data_filtered())  # Ensure there is data to plot
plot_gender_distribution(data_filtered())
})
output$divergingBarPlot <- renderPlot({
req(data_filtered())
plot_diverging_bar_chart(data_filtered(), input$year, input$sector)
})
}
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
titlePanel("Gender Pay Gap Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("sector", "Choose a Sector:", choices = names(sectors_keywords), multiple = FALSE),
selectInput("year", "Select Year:", choices = unique(paygap$Year))
),
mainPanel(
tabsetPanel(
tabPanel("Dumbbell Chart", plotOutput("dumbbellChart")),
tabPanel("Sector Analysis",
plotOutput("incomeDistPlot"),
plotOutput("divergingBarPlot")
)
)
)
)
)
# Define server logic
server <- function(input, output) {
data_filtered <- reactive({
selected_sectors <- input$sector
year_selected <- as.numeric(input$year)
# sector_data <- paygap %>%
#   filter(str_detect(EmployerName, regex(input$sector, ignore_case = TRUE)) & Year == as.numeric(input$year))
# return(sector_data)
# Combine data from all selected sectors
combined_data <- do.call(rbind, lapply(selected_sectors, function(sector) {
sector_data_frames[[sector]] %>% filter(Year == year_selected)
}))
return(combined_data)
})
output$dumbbellChart <- renderPlot({
req(sector_data_frames[[input$sector]])
plot_dumbbell_chart(sector_data_frames[[input$sector]])
})
output$incomeDistPlot <- renderPlot({
req(data_filtered())  # Ensure there is data to plot
plot_gender_distribution(data_filtered())
})
output$divergingBarPlot <- renderPlot({
req(data_filtered())
plot_diverging_bar_chart(data_filtered(), input$year, input$sector)
})
}
shinyApp(ui = ui, server = server)
# Define server logic
server <- function(input, output) {
# Flag to indicate button press
updateButton <- reactiveVal(FALSE)
# Update data_filtered when updateButton is TRUE or sector/year changes
data_filtered <- reactive({
if (updateButton() | any(changed(selected_sectors, year_selected))) {
selected_sectors <- input$sector
year_selected <- as.numeric(input$year)
# Combine data from all selected sectors
combined_data <- do.call(rbind, lapply(selected_sectors, function(sector) {
sector_data_frames[[sector]] %>% filter(Year == year_selected)
}))
updateButton(FALSE)  # Reset flag after update
return(combined_data)
} else {
# Return previous data if no update needed
return(data_filtered())
}
})
# Update updateButton on button click
observeEvent(input$go, {
updateButton(TRUE)
})
output$dumbbellChart <- renderPlot({
req(sector_data_frames[[input$sector]])
plot_dumbbell_chart(sector_data_frames[[input$sector]])
})
output$incomeDistPlot <- renderPlot({
req(data_filtered())  # Ensure there is data to plot
plot_gender_distribution(data_filtered())
})
output$divergingBarPlot <- renderPlot({
req(data_filtered())
plot_diverging_bar_chart(data_filtered(), input$year, input$sector)
})
}
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
titlePanel(
span(
img(src = "uni_logo.png", height = 50, width = 50, style = "float: left; margin-right: 10px;"),
"Gender Pay Gap Visualization",
),
),
sidebarLayout(
sidebarPanel(
selectInput("sector", "Choose a Sector:", choices = names(sectors_keywords), multiple = FALSE),
selectInput("year", "Select Year:", choices = unique(paygap$Year))
),
mainPanel(
tabsetPanel(
tabPanel("Dumbbell Chart", plotOutput("dumbbellChart")),
tabPanel("Sector Analysis",
plotOutput("incomeDistPlot"),
plotOutput("divergingBarPlot")
)
)
)
)
)
# Define server logic
server <- function(input, output) {
data_filtered <- reactive({
selected_sectors <- input$sector
year_selected <- as.numeric(input$year)
# sector_data <- paygap %>%
#   filter(str_detect(EmployerName, regex(input$sector, ignore_case = TRUE)) & Year == as.numeric(input$year))
# return(sector_data)
# Combine data from all selected sectors
combined_data <- do.call(rbind, lapply(selected_sectors, function(sector) {
sector_data_frames[[sector]] %>% filter(Year == year_selected)
}))
return(combined_data)
})
output$dumbbellChart <- renderPlot({
req(sector_data_frames[[input$sector]])
plot_dumbbell_chart(sector_data_frames[[input$sector]])
})
output$incomeDistPlot <- renderPlot({
req(data_filtered())  # Ensure there is data to plot
plot_gender_distribution(data_filtered())
})
output$divergingBarPlot <- renderPlot({
req(data_filtered())
plot_diverging_bar_chart(data_filtered(), input$year, input$sector)
})
}
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
titlePanel(
span(
img(src = "uni_logo.png", height = 50, width = 50, style = "float: left; margin-right: 10px;"),
"Gender Pay Gap Visualization",
),
),
sidebarLayout(
sidebarPanel(
selectInput("sector", "Choose a Sector:", choices = names(sectors_keywords), multiple = FALSE),
selectInput("year", "Select Year:", choices = unique(paygap$Year))
),
mainPanel(
tabsetPanel(
tabPanel("Dumbbell Chart", plotOutput("dumbbellChart")),
tabPanel("Sector Analysis",
plotOutput("incomeDistPlot"),
plotOutput("divergingBarPlot")
)
)
)
)
)
# Define server logic
server <- function(input, output) {
data_filtered <- reactive({
selected_sectors <- input$sector
year_selected <- as.numeric(input$year)
# sector_data <- paygap %>%
#   filter(str_detect(EmployerName, regex(input$sector, ignore_case = TRUE)) & Year == as.numeric(input$year))
# return(sector_data)
# Combine data from all selected sectors
combined_data <- do.call(rbind, lapply(selected_sectors, function(sector) {
sector_data_frames[[sector]] %>% filter(Year == year_selected)
}))
return(combined_data)
})
output$dumbbellChart <- renderPlot({
req(sector_data_frames[[input$sector]])
plot_dumbbell_chart(sector_data_frames[[input$sector]])
})
output$incomeDistPlot <- renderPlot({
req(data_filtered())  # Ensure there is data to plot
plot_gender_distribution(data_filtered())
})
output$divergingBarPlot <- renderPlot({
req(data_filtered())
plot_diverging_bar_chart(data_filtered(), input$year, input$sector)
})
}
shinyApp(ui = ui, server = server)
